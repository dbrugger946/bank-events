

# app settings


# Packaging
# quarkus.package.type=fast-jar

quarkus.swagger-ui.always-include=true

# Maximum Java heap to be used during the native image generation
quarkus.native.native-image-xmx=4g

quarkus.openshift.build-strategy=docker

quarkus.kubernetes-client.trust-certs=true

# quarkus.s2i.base-jvm-image=registry.access.redhat.com/openjdk/openjdk-11-rhel7



quarkus.openshift.route.expose=true

# quarkus.openshift.labels.app=app-name

quarkus.test.continuous-testing=disabled


quarkus.openshift.name=customer-event-analysis

# Configure the Kafka sink (we write to it)
%prod.mp.messaging.outgoing.kogito_outgoing_stream.bootstrap.servers=my-cluster-kafka-bootstrap.kafka-central:9092
%prod.mp.messaging.outgoing.kogito_outgoing_stream.group.id=streaming-dmn-kafka
%prod.mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
# %prod.mp.messaging.outgoing.kogito_outgoing_stream.topic=${TOPIC:decisions}
%prod.mp.messaging.outgoing.kogito_outgoing_stream.topic=offer-output-stream
%prod.mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Configure the Kafka source (we read from it)
%prod.mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=my-cluster-kafka-bootstrap.kafka-central:9092
%prod.mp.messaging.incoming.kogito_incoming_stream.group.id=streaming-dmn-kafka
%prod.mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
# Topic name that will be published/consumed.
# %prod.mp.messaging.incoming.kogito_incoming_stream.topic=${TOPIC:decisions}
%prod.mp.messaging.incoming.kogito_incoming_stream.topic=event-input-stream
%prod.mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.kogito_incoming_stream.broadcast=true


