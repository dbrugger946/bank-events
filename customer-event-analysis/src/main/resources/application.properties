



quarkus.swagger-ui.always-include=true

quarkus.container-image.group=bank-events
# quarkus.kubernetes.deployment-target=knative
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000

quarkus.openshift.build-strategy=docker
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.jvm-dockerfile=src/main/docker/Dockerfile.jvm
quarkus.openshift.route.expose=true

# Configure the Kafka sink (we write to it)
%prod.mp.messaging.outgoing.kogito_outgoing_stream.bootstrap.servers=my-cluster-kafka-bootstrap:9092
%prod.mp.messaging.outgoing.kogito_outgoing_stream.group.id=streaming-dmn-kafka
%prod.mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
# %prod.mp.messaging.outgoing.kogito_outgoing_stream.topic=${TOPIC:decisions}
%prod.mp.messaging.outgoing.kogito_outgoing_stream.topic=offer-output-stream
%prod.mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Configure the Kafka source (we read from it)
%prod.mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=my-cluster-kafka-bootstrap:9092
%prod.mp.messaging.incoming.kogito_incoming_stream.group.id=streaming-dmn-kafka
%prod.mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
# Topic name that will be published/consumed.
# %prod.mp.messaging.incoming.kogito_incoming_stream.topic=${TOPIC:decisions}
%prod.mp.messaging.incoming.kogito_incoming_stream.topic=event-input-stream
%prod.mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.kogito_incoming_stream.broadcast=true


